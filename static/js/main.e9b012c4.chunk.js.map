{"version":3,"sources":["BooksAPI.js","BookShelfChanger.js","Book.js","BooksGrid.js","BookShelf.js","ListBooks.js","SearchBooks.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","BookShelfChanger","Component","render","this","props","shelf","onShelfChange","className","value","onChange","event","target","disabled","Book","book","bookCoverStyle","width","height","imageLinks","thumbnail","backgroundImage","style","title","authors","map","author","key","BooksGrid","books","id","BookShelf","ListBooks","groupedBooks","reduce","result","current","push","currentlyReading","wantToRead","read","to","SearchBooks","state","query","updateQuery","setState","onSearch","then","res","error","booksWithShelf","bookInShelf","booksInShelf","find","p","Object","assign","type","placeholder","debounceTimeout","BooksApp","updateBookShelf","fetch","method","body","JSON","stringify","json","BooksAPI","previous","index","findIndex","slice","searchBooks","data","componentDidMount","path","exact","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e9b012c4.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass BookShelfChanger extends Component {\n  static propTypes = {\n    shelf: PropTypes.string,\n    onShelfChange : PropTypes.func.isRequired\n  }\n\n  render() {\n    const { shelf, onShelfChange } = this.props\n\n    return (\n      <div className=\"book-shelf-changer\">\n        <select value={shelf || 'none'} onChange={(event) => onShelfChange(event.target.value)}>\n          <option value=\"moveTo\" disabled>Move to...</option>\n          <option value=\"currentlyReading\">Currently Reading</option>\n          <option value=\"wantToRead\">Want to Read</option>\n          <option value=\"read\">Read</option>\n          <option value=\"none\">None</option>\n        </select>\n      </div>\n    )\n  }\n}\n\nexport default BookShelfChanger\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport BookShelfChanger from './BookShelfChanger'\n\nclass Book extends Component {\n  static propTypes = {\n    book: PropTypes.object.isRequired,\n    onShelfChange : PropTypes.func.isRequired\n  }\n\n  render() {\n    const { book, onShelfChange } = this.props\n    // TODO: add media query to conditionally display small and large thumbnail\n    const bookCoverStyle = { width: 128, height: 193 }\n\n    if (book.imageLinks && book.imageLinks.thumbnail) {\n      bookCoverStyle.backgroundImage = `url(${book.imageLinks.thumbnail})`\n    }\n\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div className=\"book-cover\" style={bookCoverStyle}></div>\n          <BookShelfChanger shelf={book.shelf} onShelfChange={shelf => onShelfChange(book, shelf)}/>\n        </div>\n        <div className=\"book-title\">{book.title}</div>\n        {book.authors && (\n            <div className=\"book-authors\">\n              {book.authors.map(author => (\n                <p key={author}>{author}</p>\n              ))}\n            </div>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport default Book\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Book from './Book'\n\nclass BooksGrid extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    onShelfChange : PropTypes.func.isRequired\n  }\n\n  render() {\n    const {books, onShelfChange} = this.props\n\n    return (\n      <ol className=\"books-grid\">\n        {books.map(book => (\n          <li key={book.id}>\n            <Book book={book} onShelfChange={onShelfChange}/>\n          </li>\n        ))}\n      </ol>\n    )\n  }\n}\n\nexport default BooksGrid\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport BooksGrid from './BooksGrid'\n\nclass BookShelf extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    books: PropTypes.array.isRequired,\n    onShelfChange : PropTypes.func.isRequired\n  }\n\n  render() {\n    const {title, books, onShelfChange} = this.props\n\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{title}</h2>\n        <div className=\"bookshelf-books\">\n          <BooksGrid books={books} onShelfChange={onShelfChange}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default BookShelf\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport BookShelf from './BookShelf'\n\nclass ListBooks extends Component {\n  static propTypes = {\n    books: PropTypes.array.isRequired,\n    onShelfChange : PropTypes.func.isRequired\n  }\n\n  render() {\n    const { books, onShelfChange } = this.props\n    // group by logic https://stackoverflow.com/a/30893916/2073920\n    const groupedBooks = books.reduce(function(result, current) {\n      result[current.shelf] = result[current.shelf] || []\n      result[current.shelf].push(current)\n      return result\n    }, [])\n\n    const currentlyReading = groupedBooks['currentlyReading']\n    const wantToRead = groupedBooks['wantToRead']\n    const read = groupedBooks['read']\n\n    return (\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            {currentlyReading && <BookShelf title=\"Currently Reading\" books={currentlyReading} onShelfChange={onShelfChange}/>}\n            {wantToRead && <BookShelf title=\"Want to Read\" books={wantToRead} onShelfChange={onShelfChange}/>}\n            {read && <BookShelf title=\"Read\" books={read} onShelfChange={onShelfChange}/>}\n          </div>\n        </div>\n        <div className=\"open-search\">\n          <Link to=\"/search\">Add a book</Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ListBooks\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { DebounceInput } from 'react-debounce-input';\nimport BooksGrid from './BooksGrid'\n\nclass SearchBooks extends Component {\n  static propTypes = {\n    onSearch: PropTypes.func.isRequired,\n    onShelfChange: PropTypes.func.isRequired,\n    booksInShelf: PropTypes.array.isRequired,\n  }\n\n  state = {\n    query: '',\n    books: []\n  }\n\n  updateQuery = (query) => {\n    this.setState({ query })\n    // prevent ajax call if search box is empty\n    if (!query) {\n      this.setState({books: []})\n      return\n    }\n    this.props.onSearch(query).then(res => {\n      if (res) {\n        if (res.error) {\n          this.setState({books: []})\n        } else {\n          this.setState({ books : res })\n        }\n      }\n    })\n  }\n\n  render() {\n    const { onShelfChange } = this.props\n    const booksWithShelf = this.state.books.map(book => {\n      const bookInShelf = this.props.booksInShelf.find( p => p.id === book.id);\n      return Object.assign({}, bookInShelf, book)\n    })\n\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link className=\"close-search\" to=\"/\">Close</Link>\n          <div className=\"search-books-input-wrapper\">\n            <DebounceInput\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              debounceTimeout={300}\n              onChange={(event) => this.updateQuery(event.target.value)}/>\n\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <BooksGrid books={booksWithShelf} onShelfChange={onShelfChange}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBooks\n","import React, { Component } from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport { Route } from 'react-router-dom'\nimport './App.css'\nimport ListBooks from './ListBooks'\nimport SearchBooks from './SearchBooks'\n\nclass BooksApp extends Component {\n  state = {\n    books : []\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll().then((books) => {\n      this.setState({ books })\n    })\n  }\n\n  updateBookShelf = (book , shelf) => {\n    BooksAPI.update(book, shelf).then(() => {\n      // updating state when state is an array\n      // https://stackoverflow.com/a/37663294/2073920\n      // merge object\n      // https://stackoverflow.com/a/171256/2073920\n      this.setState(previous => {\n        const index = previous.books.findIndex(p => p.id === book.id)\n        // replace book if it already exists after updating shelf prop\n        if (index !== -1) {\n          return {\n            books: [\n              ...previous.books.slice(0,index),\n              Object.assign({}, previous.books[index], { shelf }),\n              ...previous.books.slice(index+1)\n            ]\n          }\n        }\n        // add book after adding shelf prop\n        const books = previous.books.slice();\n        books.push(Object.assign({}, book, { shelf }));\n        return { books }\n      })\n    })\n  }\n\n  searchBooks = (query) => BooksAPI.search(query).then(books => books)\n\n  render() {\n    const { books } = this.state\n\n    return (\n      <div className=\"app\">\n        <Route path=\"/search\" render={() => (\n          <SearchBooks\n            onSearch={this.searchBooks}\n            booksInShelf={books}\n            onShelfChange={this.updateBookShelf}/>\n        )}/>\n        <Route exact path=\"/\" render={() => (\n          <ListBooks books={books} onShelfChange={this.updateBookShelf}/>\n        )}/>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}